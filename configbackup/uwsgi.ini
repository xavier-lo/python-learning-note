[uwsgi]
;直接做web服务器时所 监听地址和端口 单独使用uwsgi来部署Django项目时，就用这一行
;http = 127.0.0.1:8000

; 使用nginx连接时 进行套接字通信的方式：端口或文件  使用nginx+uwsgi来部署Django项目时，就用这行
 socket = 127.0.0.1:8000
; socket = /home/kzzf/project/OfferHelp/OfferHelp.sock

; 项目所在目录，和manage.py同级
chdir = /home/nowhay/mydev/websit/nAPI

; 虚拟环境所在目录
home=/root/anaconda3/envs/py38dj22
PYTHONHOME =/root/anaconda3/envs/py38dj22/bin/

; 主应用中的wsgi文件
wsgi-file = nAPI/wsgi.py

; 使用路由代理静态资源，但失败了
 static-safe=/home/nowhay/mydev/websit/nAPI/static
 route = /static/(.*) static:/home/nowhay/mydev/websit/nAPI/static/$1

; 代理静态资源：路径映射
 static-map = /static=/home/nowhay/mydev/websit/nAPI/static

; 启动一个master进程，来管理其余的子进程
master=True
processes = 1
threads = 1

; 保存主进程的pid，用来控制uwsgi服务
pidfile=/home/nowhay/mydev/websit/nAPI/uwsgi.pid
; 启动项目  uwsgi uwsgi.ini
; uwsgi --stop/reload xxx.pid  停止/重启uwsgi

; 设置后台运行，保存日志
daemonize=/home/nowhay/mydev/websit/nAPI/uwsgi.log
; deamonize=1  ; 用来配置background运行

; 设置每个工作进程处理请求的上限，达到上限时，将回收（重启）该进程。可以预防内存泄漏
max-requests=5000

# 服务停止时自动移除unix Socket和pid文件
vacuum=true
